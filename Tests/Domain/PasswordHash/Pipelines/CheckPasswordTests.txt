using Chest.Core.Infrastructure;
using Core.Domain.PasswordHash;
using Core.Domain.PasswordHash.Pipelines;
using Core.Domain.PasswordHash.Services;
using Shouldly;
using Tests.SharedKernel;
using Xunit;

namespace Tests.Domain.PasswordHash.Pipelines
{
    public class CheckPasswordTests : JsonTest
    {
        private CheckPassword.Handler _handler;

        private IPasswordChecker _passwordChecker ;

        public CheckPasswordTests()
        {
            _handler = new CheckPassword.Handler(_cryptoAgent, _pwdProvider);
            _passwordChecker = new PasswordChecker(_pwdProvider, _cryptoAgent) ;
        }

        [Fact]
        public void CheckPassword_ReturnSuccessIfRightPassword()
        {
            Dispose();

            // Register a password
            var right_password = "right password will you find it";
            SetPassword(right_password);

            // Call the check pipeline with the right password
            var request = new CheckPassword.Request(right_password);
            var result = _handler.Handle(request).GetAwaiter().GetResult();

            result.Success.ShouldBeTrue();

            Dispose();
        }

        [Fact]
        public void CheckPassword_ReturnsFailureIfWrongPassword()
        {
            Dispose();

            // Register a password
            var right_password = "right password will you find it";
            var wrong_password = "right password will you find i";
            SetPassword(right_password);

            // Call the check pipeline with the right password
            var request = new CheckPassword.Request(wrong_password);
            var result = _handler.Handle(request).GetAwaiter().GetResult();

            result.Success.ShouldBeFalse();

            Dispose();
        }

        [Fact]
        public void CheckPassword_ThrowsExceptionIfNoPasswordIsStored()
        {
            Dispose();

            var right_password = "right password will you find it";

            // Call the check pipeline with the right password
            var request = new CheckPassword.Request(right_password);
            _handler.Handle(request).ShouldThrow(typeof(NoPasswordStoredException));

            Dispose();
        }
        private void SetPassword(string password)
        {
            var setPasswordHandler = new SetPassword.Handler(_accountProvider, _pwdProvider, _cryptoAgent, _passwordChecker);
            var setPasswordRequest = new SetPassword.Request(null, password);
            setPasswordHandler.Handle(setPasswordRequest).GetAwaiter().GetResult();
        }
    }
}